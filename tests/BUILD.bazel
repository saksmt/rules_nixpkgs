package(default_testonly = 1)

load("@io_bazel_rules_go//go:def.bzl", "go_binary")

[
    # All of these tests use the "hello" binary to see
    # whether different invocations of `nixpkgs_package`
    # produce a valid bazel repository.
    sh_test(
        name = "run-{0}".format(test),
        timeout = "short",
        srcs = ["test_bin.sh"],
        args = ["$(location @{0}//:bin)".format(test)],
        data = ["@{0}//:bin".format(test)],
    )
    for test in [
        "hello",
        "expr-test",
        "attribute-test",
        "expr-attribute-test",
        "nix-file-test",
        "nix-file-deps-test",
        "nixpkgs-git-repository-test",
        "relative-imports",
    ]
] + [
    # These tests use the nix package generated by ./output.nix

    # Checks whether the `:include` filegroup of `nixpkgs_package`
    # repositories works as intended
    # (that the expected number of files are inside the target)
    sh_test(
        name = "run-test-include",
        timeout = "short",
        srcs = ["test_output.sh"],
        args = [
            "2",
            "$(locations @output-filegroup-test//:include)",
        ],
        data = ["@output-filegroup-test//:include"],
    ),

    # Checks whether specifying a manual filegroup in the
    # `nixpkgs_package` BUILD file works as well.
    sh_test(
        name = "run-test-manual-filegroup",
        timeout = "short",
        srcs = ["test_output.sh"],
        args = [
            "3",
            "$(locations @output-filegroup-manual-test//:manual-filegroup)",
        ],
        data = ["@output-filegroup-manual-test//:manual-filegroup"],
    ),
]

# Test nixpkgs_cc_configure() by building some CC code.
cc_binary(
    name = "cc-test",
    srcs = ["cc-test.cc"],
)

# Test nixpkgs_python_configure() by running some Python code.
test_suite(
    name = "python-test",
    tests = [
        "@nixpkgs_python_configure_test//:python2-test",
        "@nixpkgs_python_configure_test//:python3-test",
    ],
)

# Test nixpkgs_sh_posix_configure() checking that Unix commands are in Nix store.
sh_test(
    name = "run-test-posix-toolchain",
    timeout = "short",
    srcs = ["test_posix_toolchain.sh"],
    args = [
        "$(POSIX_AWK)",
        "$(POSIX_CAT)",
        "$(POSIX_GREP)",
        "$(POSIX_MAKE)",
    ],
    toolchains = ["@rules_sh//sh/posix:make_variables"],
)

# Test nixpkgs_go_configure()
go_binary(
    name = "go-test",
    srcs = ["go-test.go"]
)
